# Generated by Django 4.2.16 on 2024-11-07 12:16

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("pghistory", "0006_delete_aggregateevent"),
        ("osidb", "0174_remove_affect_insert_insert_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="AffectCVSSAudit",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                ("vector", models.CharField(max_length=200)),
                (
                    "version",
                    models.CharField(
                        choices=[
                            ("V2", "version 2"),
                            ("V3", "version 3"),
                            ("V4", "version 4"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "issuer",
                    models.CharField(
                        choices=[
                            ("CVEORG", "CVEORG"),
                            ("RH", "Red Hat"),
                            ("NIST", "NIST"),
                            ("OSV", "OSV"),
                        ],
                        max_length=16,
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("score", models.FloatField(default=0)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlawAcknowledgmentAudit",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("affiliation", models.CharField(blank=True, max_length=255)),
                ("from_upstream", models.BooleanField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlawCommentAudit",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                ("external_system_id", models.CharField(blank=True, max_length=100)),
                ("synced_to_bz", models.BooleanField(default=False)),
                ("order", models.IntegerField(blank=True, null=True)),
                ("text", models.TextField()),
                ("creator", models.CharField(blank=True, max_length=100)),
                ("is_private", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlawCVSSAudit",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                ("vector", models.CharField(max_length=200)),
                (
                    "version",
                    models.CharField(
                        choices=[
                            ("V2", "version 2"),
                            ("V3", "version 3"),
                            ("V4", "version 4"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "issuer",
                    models.CharField(
                        choices=[
                            ("CVEORG", "CVEORG"),
                            ("RH", "Red Hat"),
                            ("NIST", "NIST"),
                            ("OSV", "OSV"),
                        ],
                        max_length=16,
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("score", models.FloatField(default=0)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlawReferenceAudit",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ARTICLE", "Article"),
                            ("EXTERNAL", "External"),
                            ("SOURCE", "Source"),
                            ("UPSTREAM", "Upstream"),
                        ],
                        default="EXTERNAL",
                        max_length=50,
                    ),
                ),
                ("url", models.URLField(max_length=2048)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SnippetAudit",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                ("external_id", models.CharField(max_length=200)),
                (
                    "source",
                    models.CharField(
                        choices=[("CVEORG", "Cveorg"), ("NVD", "Nvd"), ("OSV", "Osv")],
                        max_length=100,
                    ),
                ),
                ("content", models.JSONField(default=dict)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TrackerAudit",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("created_dt", models.DateTimeField(blank=True)),
                ("updated_dt", models.DateTimeField(blank=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("JIRA", "Jira"), ("BUGZILLA", "Bugzilla")],
                        max_length=100,
                    ),
                ),
                ("external_system_id", models.CharField(blank=True, max_length=100)),
                ("status", models.CharField(blank=True, max_length=100)),
                ("resolution", models.CharField(blank=True, max_length=100)),
                ("ps_update_stream", models.CharField(blank=True, max_length=100)),
                (
                    "last_impact_increase_dt",
                    models.DateTimeField(blank=True, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="affectcvss",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_affectcvssaudit" ("acl_read", "acl_write", "affect_id", "comment", "created_dt", "issuer", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "updated_dt", "uuid", "vector", "version") VALUES (NEW."acl_read", NEW."acl_write", NEW."affect_id", NEW."comment", NEW."created_dt", NEW."issuer", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."score", NEW."updated_dt", NEW."uuid", NEW."vector", NEW."version"); RETURN NULL;',
                    hash="745425a72800252cbb9dc4680abab6388b85416f", # pragma: allowlist secret
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_b9f93",
                    table="osidb_affectcvss",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="affectcvss",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "osidb_affectcvssaudit" ("acl_read", "acl_write", "affect_id", "comment", "created_dt", "issuer", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "updated_dt", "uuid", "vector", "version") VALUES (NEW."acl_read", NEW."acl_write", NEW."affect_id", NEW."comment", NEW."created_dt", NEW."issuer", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."score", NEW."updated_dt", NEW."uuid", NEW."vector", NEW."version"); RETURN NULL;',
                    hash="16b88945a40daffb5809c3577ee8221b22f40e45", # pragma: allowlist secret
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_2bc7b",
                    table="osidb_affectcvss",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="affectcvss",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_affectcvssaudit" ("acl_read", "acl_write", "affect_id", "comment", "created_dt", "issuer", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "updated_dt", "uuid", "vector", "version") VALUES (OLD."acl_read", OLD."acl_write", OLD."affect_id", OLD."comment", OLD."created_dt", OLD."issuer", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."score", OLD."updated_dt", OLD."uuid", OLD."vector", OLD."version"); RETURN NULL;',
                    hash="24614925147d87efccf0abfb314a40b770d436c8", # pragma: allowlist secret
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_5e2a9",
                    table="osidb_affectcvss",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawacknowledgment",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_flawacknowledgmentaudit" ("acl_read", "acl_write", "affiliation", "created_dt", "flaw_id", "from_upstream", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."affiliation", NEW."created_dt", NEW."flaw_id", NEW."from_upstream", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="71eb9f0cd83f892cf1cc4a974e2ae6af5c78664a", # pragma: allowlist secret
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_8d8ea",
                    table="osidb_flawacknowledgment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawacknowledgment",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "osidb_flawacknowledgmentaudit" ("acl_read", "acl_write", "affiliation", "created_dt", "flaw_id", "from_upstream", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."affiliation", NEW."created_dt", NEW."flaw_id", NEW."from_upstream", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="d596f79827376dcedd8c03dd43938fe39ad2ebf2", # pragma: allowlist secret
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_3f509",
                    table="osidb_flawacknowledgment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawacknowledgment",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_flawacknowledgmentaudit" ("acl_read", "acl_write", "affiliation", "created_dt", "flaw_id", "from_upstream", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_dt", "uuid") VALUES (OLD."acl_read", OLD."acl_write", OLD."affiliation", OLD."created_dt", OLD."flaw_id", OLD."from_upstream", OLD."name", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."updated_dt", OLD."uuid"); RETURN NULL;',
                    hash="e4eec8e4f8d9e47f3e0c729132f40b86e822c926", # pragma: allowlist secret
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_c737c",
                    table="osidb_flawacknowledgment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_flawcommentaudit" ("acl_read", "acl_write", "created_dt", "creator", "external_system_id", "flaw_id", "is_private", "order", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "synced_to_bz", "text", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."created_dt", NEW."creator", NEW."external_system_id", NEW."flaw_id", NEW."is_private", NEW."order", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."synced_to_bz", NEW."text", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="0152daee73627bc5b8064196397a9996343732fd", # pragma: allowlist secret
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_5fac1",
                    table="osidb_flawcomment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "osidb_flawcommentaudit" ("acl_read", "acl_write", "created_dt", "creator", "external_system_id", "flaw_id", "is_private", "order", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "synced_to_bz", "text", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."created_dt", NEW."creator", NEW."external_system_id", NEW."flaw_id", NEW."is_private", NEW."order", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."synced_to_bz", NEW."text", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="2085a821601d5aa205a83a14b5cdebd700106b34", # pragma: allowlist secret
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_165cb",
                    table="osidb_flawcomment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_flawcommentaudit" ("acl_read", "acl_write", "created_dt", "creator", "external_system_id", "flaw_id", "is_private", "order", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "synced_to_bz", "text", "updated_dt", "uuid") VALUES (OLD."acl_read", OLD."acl_write", OLD."created_dt", OLD."creator", OLD."external_system_id", OLD."flaw_id", OLD."is_private", OLD."order", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."synced_to_bz", OLD."text", OLD."updated_dt", OLD."uuid"); RETURN NULL;',
                    hash="f16e73764c620aaaf6bc5f2a79fdc9e280bdb146", # pragma: allowlist secret
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_09c05",
                    table="osidb_flawcomment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawcvss",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_flawcvssaudit" ("acl_read", "acl_write", "comment", "created_dt", "flaw_id", "issuer", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "updated_dt", "uuid", "vector", "version") VALUES (NEW."acl_read", NEW."acl_write", NEW."comment", NEW."created_dt", NEW."flaw_id", NEW."issuer", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."score", NEW."updated_dt", NEW."uuid", NEW."vector", NEW."version"); RETURN NULL;',
                    hash="e36295da9a14912632b72a85926a6fc536718feb", # pragma: allowlist secret
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_c1c4a",
                    table="osidb_flawcvss",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawcvss",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "osidb_flawcvssaudit" ("acl_read", "acl_write", "comment", "created_dt", "flaw_id", "issuer", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "updated_dt", "uuid", "vector", "version") VALUES (NEW."acl_read", NEW."acl_write", NEW."comment", NEW."created_dt", NEW."flaw_id", NEW."issuer", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."score", NEW."updated_dt", NEW."uuid", NEW."vector", NEW."version"); RETURN NULL;',
                    hash="992b9226b9685e7248f51da7542721d8452937ce", # pragma: allowlist secret
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_6038c",
                    table="osidb_flawcvss",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawcvss",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_flawcvssaudit" ("acl_read", "acl_write", "comment", "created_dt", "flaw_id", "issuer", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "score", "updated_dt", "uuid", "vector", "version") VALUES (OLD."acl_read", OLD."acl_write", OLD."comment", OLD."created_dt", OLD."flaw_id", OLD."issuer", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."score", OLD."updated_dt", OLD."uuid", OLD."vector", OLD."version"); RETURN NULL;',
                    hash="5068f2bba4a11ab991383887851133a48503892e", # pragma: allowlist secret
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_608c3",
                    table="osidb_flawcvss",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawreference",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_flawreferenceaudit" ("acl_read", "acl_write", "created_dt", "description", "flaw_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "type", "updated_dt", "url", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."created_dt", NEW."description", NEW."flaw_id", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."type", NEW."updated_dt", NEW."url", NEW."uuid"); RETURN NULL;',
                    hash="55e8e5c0d09c7c6af90556edf61dec5f6230771c", # pragma: allowlist secret
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_7df8e",
                    table="osidb_flawreference",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawreference",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "osidb_flawreferenceaudit" ("acl_read", "acl_write", "created_dt", "description", "flaw_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "type", "updated_dt", "url", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."created_dt", NEW."description", NEW."flaw_id", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."type", NEW."updated_dt", NEW."url", NEW."uuid"); RETURN NULL;',
                    hash="d30c19f12e078915cda5ec662a83c0dba467432e", # pragma: allowlist secret
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_5bc43",
                    table="osidb_flawreference",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawreference",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_flawreferenceaudit" ("acl_read", "acl_write", "created_dt", "description", "flaw_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "type", "updated_dt", "url", "uuid") VALUES (OLD."acl_read", OLD."acl_write", OLD."created_dt", OLD."description", OLD."flaw_id", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."type", OLD."updated_dt", OLD."url", OLD."uuid"); RETURN NULL;',
                    hash="430d043440843fe610c44b9550dd2c58ee9f3ee6", # pragma: allowlist secret
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_8fa4c",
                    table="osidb_flawreference",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="snippet",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_snippetaudit" ("acl_read", "acl_write", "content", "created_dt", "external_id", "flaw_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "source", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."content", NEW."created_dt", NEW."external_id", NEW."flaw_id", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."source", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="9400b39e458f06c6d69956a9d0fa05afc0d8a020", # pragma: allowlist secret
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_e56b3",
                    table="osidb_snippet",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="snippet",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "osidb_snippetaudit" ("acl_read", "acl_write", "content", "created_dt", "external_id", "flaw_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "source", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."content", NEW."created_dt", NEW."external_id", NEW."flaw_id", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."source", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="daf6f9a5633616244984cde00820975fabc42328", # pragma: allowlist secret
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_ff792",
                    table="osidb_snippet",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="snippet",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_snippetaudit" ("acl_read", "acl_write", "content", "created_dt", "external_id", "flaw_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "source", "updated_dt", "uuid") VALUES (OLD."acl_read", OLD."acl_write", OLD."content", OLD."created_dt", OLD."external_id", OLD."flaw_id", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."source", OLD."updated_dt", OLD."uuid"); RETURN NULL;',
                    hash="eb41ece85d47049f02757e3221d577505b4815ca", # pragma: allowlist secret
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_56a33",
                    table="osidb_snippet",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tracker",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_trackeraudit" ("acl_read", "acl_write", "bz_download_manager_id", "bz_link_manager_id", "created_dt", "external_system_id", "jira_download_manager_id", "jira_link_manager_id", "last_impact_increase_dt", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_update_stream", "resolution", "status", "type", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."bz_download_manager_id", NEW."bz_link_manager_id", NEW."created_dt", NEW."external_system_id", NEW."jira_download_manager_id", NEW."jira_link_manager_id", NEW."last_impact_increase_dt", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."ps_update_stream", NEW."resolution", NEW."status", NEW."type", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="b42e600663cf024d73501a09508108af1a97f299", # pragma: allowlist secret
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_781c0",
                    table="osidb_tracker",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tracker",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."acl_read" IS DISTINCT FROM (NEW."acl_read") OR OLD."acl_write" IS DISTINCT FROM (NEW."acl_write") OR OLD."bz_download_manager_id" IS DISTINCT FROM (NEW."bz_download_manager_id") OR OLD."bz_link_manager_id" IS DISTINCT FROM (NEW."bz_link_manager_id") OR OLD."created_dt" IS DISTINCT FROM (NEW."created_dt") OR OLD."external_system_id" IS DISTINCT FROM (NEW."external_system_id") OR OLD."jira_download_manager_id" IS DISTINCT FROM (NEW."jira_download_manager_id") OR OLD."jira_link_manager_id" IS DISTINCT FROM (NEW."jira_link_manager_id") OR OLD."last_impact_increase_dt" IS DISTINCT FROM (NEW."last_impact_increase_dt") OR OLD."ps_update_stream" IS DISTINCT FROM (NEW."ps_update_stream") OR OLD."resolution" IS DISTINCT FROM (NEW."resolution") OR OLD."status" IS DISTINCT FROM (NEW."status") OR OLD."type" IS DISTINCT FROM (NEW."type") OR OLD."updated_dt" IS DISTINCT FROM (NEW."updated_dt") OR OLD."uuid" IS DISTINCT FROM (NEW."uuid"))',
                    func='INSERT INTO "osidb_trackeraudit" ("acl_read", "acl_write", "bz_download_manager_id", "bz_link_manager_id", "created_dt", "external_system_id", "jira_download_manager_id", "jira_link_manager_id", "last_impact_increase_dt", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_update_stream", "resolution", "status", "type", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."bz_download_manager_id", NEW."bz_link_manager_id", NEW."created_dt", NEW."external_system_id", NEW."jira_download_manager_id", NEW."jira_link_manager_id", NEW."last_impact_increase_dt", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."ps_update_stream", NEW."resolution", NEW."status", NEW."type", NEW."updated_dt", NEW."uuid"); RETURN NULL;',
                    hash="8520e99e1b49a4016ee487d6a522ed8366441337", # pragma: allowlist secret
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_4b400",
                    table="osidb_tracker",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="tracker",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "osidb_trackeraudit" ("acl_read", "acl_write", "bz_download_manager_id", "bz_link_manager_id", "created_dt", "external_system_id", "jira_download_manager_id", "jira_link_manager_id", "last_impact_increase_dt", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_update_stream", "resolution", "status", "type", "updated_dt", "uuid") VALUES (OLD."acl_read", OLD."acl_write", OLD."bz_download_manager_id", OLD."bz_link_manager_id", OLD."created_dt", OLD."external_system_id", OLD."jira_download_manager_id", OLD."jira_link_manager_id", OLD."last_impact_increase_dt", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."ps_update_stream", OLD."resolution", OLD."status", OLD."type", OLD."updated_dt", OLD."uuid"); RETURN NULL;',
                    hash="b6d588659ca32712c96b064bbe4da8a590f5d1ac", # pragma: allowlist secret
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_d12e8",
                    table="osidb_tracker",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="trackeraudit",
            name="bz_download_manager",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.bztrackerdownloadmanager",
            ),
        ),
        migrations.AddField(
            model_name="trackeraudit",
            name="bz_link_manager",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.bztrackerlinkmanager",
            ),
        ),
        migrations.AddField(
            model_name="trackeraudit",
            name="jira_download_manager",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.jiratrackerdownloadmanager",
            ),
        ),
        migrations.AddField(
            model_name="trackeraudit",
            name="jira_link_manager",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.jiratrackerlinkmanager",
            ),
        ),
        migrations.AddField(
            model_name="trackeraudit",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="trackeraudit",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="osidb.tracker",
            ),
        ),
        migrations.AddField(
            model_name="snippetaudit",
            name="flaw",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.flaw",
            ),
        ),
        migrations.AddField(
            model_name="snippetaudit",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="snippetaudit",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="osidb.snippet",
            ),
        ),
        migrations.AddField(
            model_name="flawreferenceaudit",
            name="flaw",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.flaw",
            ),
        ),
        migrations.AddField(
            model_name="flawreferenceaudit",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="flawreferenceaudit",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="osidb.flawreference",
            ),
        ),
        migrations.AddField(
            model_name="flawcvssaudit",
            name="flaw",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.flaw",
            ),
        ),
        migrations.AddField(
            model_name="flawcvssaudit",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="flawcvssaudit",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="osidb.flawcvss",
            ),
        ),
        migrations.AddField(
            model_name="flawcommentaudit",
            name="flaw",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.flaw",
            ),
        ),
        migrations.AddField(
            model_name="flawcommentaudit",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="flawcommentaudit",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="osidb.flawcomment",
            ),
        ),
        migrations.AddField(
            model_name="flawacknowledgmentaudit",
            name="flaw",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.flaw",
            ),
        ),
        migrations.AddField(
            model_name="flawacknowledgmentaudit",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="flawacknowledgmentaudit",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="osidb.flawacknowledgment",
            ),
        ),
        migrations.AddField(
            model_name="affectcvssaudit",
            name="affect",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="osidb.affect",
            ),
        ),
        migrations.AddField(
            model_name="affectcvssaudit",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="affectcvssaudit",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="osidb.affectcvss",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="trackeraudit",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="3d61059f26783e103c99eebcb7f6130d7bcc12ae", # pragma: allowlist secret
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_f1010",
                    table="osidb_trackeraudit",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="snippetaudit",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="3d662cdeb39f58dd1e5ae1e99c7f91a319cd488d", # pragma: allowlist secret
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_45d54",
                    table="osidb_snippetaudit",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawreferenceaudit",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="37c5f43e6fc45b2f5a64873446ec537be28cf01c", # pragma: allowlist secret
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_0a80c",
                    table="osidb_flawreferenceaudit",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawcvssaudit",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="344f9da9a58157f5ebad3b1102bd0e7d62be41dc", # pragma: allowlist secret
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_d6d29",
                    table="osidb_flawcvssaudit",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawcommentaudit",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="9df59ab1989d89ffcbdfc35ae9cb4f7fd57f0f0b", # pragma: allowlist secret
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_2d4f0",
                    table="osidb_flawcommentaudit",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="flawacknowledgmentaudit",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="7aa6d5750a7547629ba6e7d619f8ce395711dc4b", # pragma: allowlist secret
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_1ca74",
                    table="osidb_flawacknowledgmentaudit",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="affectcvssaudit",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="27fb1493e869039e99269ab4103e63e058cf8194", # pragma: allowlist secret
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_f8c79",
                    table="osidb_affectcvssaudit",
                    when="BEFORE",
                ),
            ),
        ),
        # Enable row level security for the new history models
        migrations.RunSQL(
            reverse_sql=migrations.RunSQL.noop,
            sql="""
    --enable row based security for TrackerAudit
    ALTER TABLE osidb_trackeraudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_trackeraudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_trackeraudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_trackeraudit_create on osidb_trackeraudit;
    create policy acl_policy_trackeraudit_create
    on osidb_trackeraudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    -- Check that read / write ACLs of record to be inserted match ACL of current user
    --policy for entity select
    DROP policy if exists acl_policy_trackeraudit_select on osidb_trackeraudit;
    create policy acl_policy_trackeraudit_select
    on osidb_trackeraudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    -- Select only records with ACL that matches ACL of current user
    --policy for entity update
    DROP policy if exists acl_policy_trackeraudit_update on osidb_trackeraudit;
    create policy acl_policy_trackeraudit_update
    on osidb_trackeraudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_trackeraudit_delete on osidb_trackeraudit;
    create policy acl_policy_trackeraudit_delete
    on osidb_trackeraudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

    --enable row based security for FlawAcknowledgmentAudit
    ALTER TABLE osidb_flawacknowledgmentaudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_flawacknowledgmentaudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_flawacknowledgmentaudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_flawacknowledgmentaudit_create on osidb_flawacknowledgmentaudit;
    create policy acl_policy_flawacknowledgmentaudit_create
    on osidb_flawacknowledgmentaudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    -- Check that read / write ACLs of record to be inserted match ACL of current user
    --policy for entity select
    DROP policy if exists acl_policy_flawacknowledgmentaudit_select on osidb_flawacknowledgmentaudit;
    create policy acl_policy_flawacknowledgmentaudit_select
    on osidb_flawacknowledgmentaudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    -- Select only records with ACL that matches ACL of current user
    --policy for entity update
    DROP policy if exists acl_policy_flawacknowledgmentaudit_update on osidb_flawacknowledgmentaudit;
    create policy acl_policy_flawacknowledgmentaudit_update
    on osidb_flawacknowledgmentaudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_flawacknowledgmentaudit_delete on osidb_flawacknowledgmentaudit;
    create policy acl_policy_flawacknowledgmentaudit_delete
    on osidb_flawacknowledgmentaudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

    --enable row based security for FlawReferenceAudit
    ALTER TABLE osidb_flawreferenceaudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_flawreferenceaudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_flawreferenceaudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_flawreferenceaudit_create on osidb_flawreferenceaudit;
    create policy acl_policy_flawreferenceaudit_create
    on osidb_flawreferenceaudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    -- Check that read / write ACLs of record to be inserted match ACL of current user
    --policy for entity select
    DROP policy if exists acl_policy_flawreferenceaudit_select on osidb_flawreferenceaudit;
    create policy acl_policy_flawreferenceaudit_select
    on osidb_flawreferenceaudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    -- Select only records with ACL that matches ACL of current user
    --policy for entity update
    DROP policy if exists acl_policy_flawreferenceaudit_update on osidb_flawreferenceaudit;
    create policy acl_policy_flawreferenceaudit_update
    on osidb_flawreferenceaudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_flawreferenceaudit_delete on osidb_flawreferenceaudit;
    create policy acl_policy_flawreferenceaudit_delete
    on osidb_flawreferenceaudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

    --enable row based security for FlawCommentAudit
    ALTER TABLE osidb_flawcommentaudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_flawcommentaudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_flawcommentaudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_flawcommentaudit_create on osidb_flawcommentaudit;
    create policy acl_policy_flawcommentaudit_create
    on osidb_flawcommentaudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    -- Check that read / write ACLs of record to be inserted match ACL of current user
    --policy for entity select
    DROP policy if exists acl_policy_flawcommentaudit_select on osidb_flawcommentaudit;
    create policy acl_policy_flawcommentaudit_select
    on osidb_flawcommentaudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    -- Select only records with ACL that matches ACL of current user
    --policy for entity update
    DROP policy if exists acl_policy_flawcommentaudit_update on osidb_flawcommentaudit;
    create policy acl_policy_flawcommentaudit_update
    on osidb_flawcommentaudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_flawcommentaudit_delete on osidb_flawcommentaudit;
    create policy acl_policy_flawcommentaudit_delete
    on osidb_flawcommentaudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

    --enable row based security for FlawCVSSAudit
    ALTER TABLE osidb_flawcvssaudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_flawcvssaudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_flawcvssaudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_flawcvssaudit_create on osidb_flawcvssaudit;
    create policy acl_policy_flawcvssaudit_create
    on osidb_flawcvssaudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    -- Check that read / write ACLs of record to be inserted match ACL of current user
    --policy for entity select
    DROP policy if exists acl_policy_flawcvssaudit_select on osidb_flawcvssaudit;
    create policy acl_policy_flawcvssaudit_select
    on osidb_flawcvssaudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    -- Select only records with ACL that matches ACL of current user
    --policy for entity update
    DROP policy if exists acl_policy_flawcvssaudit_update on osidb_flawcvssaudit;
    create policy acl_policy_flawcvssaudit_update
    on osidb_flawcvssaudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_flawcvssaudit_delete on osidb_flawcvssaudit;
    create policy acl_policy_flawcvssaudit_delete
    on osidb_flawcvssaudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

    --enable row based security for AffectCVSSAudit
    ALTER TABLE osidb_affectcvssaudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_affectcvssaudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_affectcvssaudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_affectcvssaudit_create on osidb_affectcvssaudit;
    create policy acl_policy_affectcvssaudit_create
    on osidb_affectcvssaudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    -- Check that read / write ACLs of record to be inserted match ACL of current user
    --policy for entity select
    DROP policy if exists acl_policy_affectcvssaudit_select on osidb_affectcvssaudit;
    create policy acl_policy_affectcvssaudit_select
    on osidb_affectcvssaudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    -- Select only records with ACL that matches ACL of current user
    --policy for entity update
    DROP policy if exists acl_policy_affectcvssaudit_update on osidb_affectcvssaudit;
    create policy acl_policy_affectcvssaudit_update
    on osidb_affectcvssaudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_affectcvssaudit_delete on osidb_affectcvssaudit;
    create policy acl_policy_affectcvssaudit_delete
    on osidb_affectcvssaudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);

    --enable row based security for SnippetAudit
    ALTER TABLE osidb_snippetaudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_snippetaudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_snippetaudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_snippetaudit_create on osidb_snippetaudit;
    create policy acl_policy_snippetaudit_create
    on osidb_snippetaudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    -- Check that read / write ACLs of record to be inserted match ACL of current user
    --policy for entity select
    DROP policy if exists acl_policy_snippetaudit_select on osidb_snippetaudit;
    create policy acl_policy_snippetaudit_select
    on osidb_snippetaudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    -- Select only records with ACL that matches ACL of current user
    --policy for entity update
    DROP policy if exists acl_policy_snippetaudit_update on osidb_snippetaudit;
    create policy acl_policy_snippetaudit_update
    on osidb_snippetaudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_snippetaudit_delete on osidb_snippetaudit;
    create policy acl_policy_snippetaudit_delete
    on osidb_snippetaudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
""",
        ),
    ]
