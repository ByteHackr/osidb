# Generated by Django 3.2.25 on 2024-06-12 06:51

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import osidb.validators
import pgtrigger.compiler
import pgtrigger.migrations
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0006_delete_aggregateevent'),
        ('osidb', '0144_remove_flawcomment_meta_attr'),
    ]

    operations = [
        migrations.CreateModel(
            name='AffectAudit',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('created_dt', models.DateTimeField(blank=True)),
                ('updated_dt', models.DateTimeField(blank=True)),
                ('acl_read', django.contrib.postgres.fields.ArrayField(base_field=models.UUIDField(), default=list, size=None)),
                ('acl_write', django.contrib.postgres.fields.ArrayField(base_field=models.UUIDField(), default=list, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, serialize=False)),
                ('affectedness', models.CharField(blank=True, choices=[('', 'No value'), ('NEW', 'Unknown'), ('AFFECTED', 'Affected'), ('NOTAFFECTED', 'Not affected')], default='NEW', max_length=100)),
                ('resolution', models.CharField(blank=True, choices=[('', 'Novalue'), ('FIX', 'Fix'), ('DEFER', 'Defer'), ('WONTFIX', 'Wontfix'), ('OOSS', 'Ooss'), ('DELEGATED', 'Delegated'), ('WONTREPORT', 'Wontreport')], default='', max_length=100)),
                ('ps_module', models.CharField(max_length=100)),
                ('ps_component', models.CharField(max_length=255)),
                ('impact', models.CharField(blank=True, choices=[('', 'Novalue'), ('LOW', 'Low'), ('MODERATE', 'Moderate'), ('IMPORTANT', 'Important'), ('CRITICAL', 'Critical')], max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FlawAudit',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('created_dt', models.DateTimeField(blank=True)),
                ('acl_read', django.contrib.postgres.fields.ArrayField(base_field=models.UUIDField(), default=list, size=None)),
                ('acl_write', django.contrib.postgres.fields.ArrayField(base_field=models.UUIDField(), default=list, size=None)),
                ('workflow_name', models.CharField(blank=True, default='DEFAULT', max_length=50)),
                ('workflow_state', models.CharField(blank=True, choices=[('NEW', 'New'), ('TRIAGE', 'Triage'), ('PRE_SECONDARY_ASSESSMENT', 'Pre Secondary Assessment'), ('SECONDARY_ASSESSMENT', 'Secondary Assessment'), ('DONE', 'Done'), ('REJECTED', 'Rejected')], default='NEW', max_length=24)),
                ('owner', models.CharField(blank=True, max_length=60)),
                ('group_key', models.CharField(blank=True, max_length=60)),
                ('task_key', models.CharField(blank=True, max_length=60)),
                ('team_id', models.CharField(blank=True, max_length=8)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, serialize=False)),
                ('cve_id', models.CharField(blank=True, max_length=500, null=True, validators=[osidb.validators.validate_cve_id])),
                ('impact', models.CharField(blank=True, choices=[('', 'Novalue'), ('LOW', 'Low'), ('MODERATE', 'Moderate'), ('IMPORTANT', 'Important'), ('CRITICAL', 'Critical')], max_length=20)),
                ('components', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, default=list, size=None)),
                ('title', models.TextField()),
                ('comment_zero', models.TextField()),
                ('cve_description', models.TextField(blank=True)),
                ('requires_cve_description', models.CharField(blank=True, choices=[('', 'Novalue'), ('REQUESTED', 'Requested'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], max_length=20)),
                ('statement', models.TextField(blank=True)),
                ('cwe_id', models.CharField(blank=True, max_length=255, validators=[osidb.validators.validate_cwe_id])),
                ('unembargo_dt', models.DateTimeField(blank=True, null=True)),
                ('source', models.CharField(blank=True, choices=[('ADOBE', 'Adobe'), ('APPLE', 'Apple'), ('ASF', 'Asf'), ('BIND', 'Bind'), ('BK', 'Bk'), ('BUGTRAQ', 'Bugtraq'), ('BUGZILLA', 'Bugzilla'), ('CERT', 'Cert'), ('CERTIFI', 'Certfi'), ('CORELABS', 'Corelabs'), ('CUSTOMER', 'Customer'), ('CVE', 'Cve'), ('DAILYDAVE', 'Dailydave'), ('DEBIAN', 'Debian'), ('DISTROS', 'Distros'), ('FEDORA', 'Fedora'), ('FETCHMAIL', 'Fetchmail'), ('FREEDESKTOP', 'Freedesktop'), ('FREERADIUS', 'Freeradius'), ('FRSIRT', 'Frsirt'), ('FULLDISCLOSURE', 'Full Disclosure'), ('GAIM', 'Gaim'), ('GENTOO', 'Gentoo'), ('GENTOOBZ', 'Gentoobz'), ('GIT', 'Git'), ('GNOME', 'Gnome'), ('GNUPG', 'Gnupg'), ('GOOGLE', 'Google'), ('HP', 'Hp'), ('HW_VENDOR', 'Hw Vendor'), ('IBM', 'Ibm'), ('IDEFENSE', 'Idefense'), ('INTERNET', 'Internet'), ('ISC', 'Isc'), ('ISEC', 'Isec'), ('IT', 'It'), ('JBOSS', 'Jboss'), ('JPCERT', 'Jpcert'), ('KERNELBUGZILLA', 'Kernelbugzilla'), ('KERNELSEC', 'Kernelsec'), ('LKML', 'Lkml'), ('LWN', 'Lwn'), ('MACROMEDIA', 'Macromedia'), ('MAGEIA', 'Mageia'), ('MAILINGLIST', 'Mailinglist'), ('MILW0RM', 'Milw0Rm'), ('MIT', 'Mit'), ('MITRE', 'Mitre'), ('MOZILLA', 'Mozilla'), ('MUTTDEV', 'Muttdev'), ('NETDEV', 'Netdev'), ('NISCC', 'Niscc'), ('', 'Novalue'), ('NVD', 'Nvd'), ('OCERT', 'Ocert'), ('OPENOFFICE', 'Openoffice'), ('OPENSSL', 'Openssl'), ('OPENSUSE', 'Opensuse'), ('ORACLE', 'Oracle'), ('OSS', 'Oss'), ('OSSSECURITY', 'Oss Security'), ('OSV', 'Osv'), ('PHP', 'Php'), ('PIDGIN', 'Pidgin'), ('POSTGRESQL', 'Postgresql'), ('PRESS', 'Press'), ('REAL', 'Real'), ('REDHAT', 'Redhat'), ('RESEARCHER', 'Researcher'), ('RT', 'Rt'), ('SAMBA', 'Samba'), ('SECALERT', 'Secalert'), ('SECUNIA', 'Secunia'), ('SECURITYFOCUS', 'Securityfocus'), ('SKO', 'Sko'), ('SQUID', 'Squid'), ('SQUIRRELMAIL', 'Squirrelmail'), ('SUN', 'Sun'), ('SUNSOLVE', 'Sunsolve'), ('SUSE', 'Suse'), ('TWITTER', 'Twitter'), ('UBUNTU', 'Ubuntu'), ('UPSTREAM', 'Upstream'), ('VENDORSEC', 'Vendor Sec'), ('VULNWATCH', 'Vulnwatch'), ('WIRESHARK', 'Wireshark'), ('XCHAT', 'Xchat'), ('XEN', 'Xen'), ('XPDF', 'Xpdf')], max_length=500)),
                ('reported_dt', models.DateTimeField(blank=True, null=True, validators=[osidb.validators.no_future_date])),
                ('mitigation', models.TextField(blank=True)),
                ('major_incident_state', models.CharField(blank=True, choices=[('', 'Novalue'), ('REQUESTED', 'Requested'), ('REJECTED', 'Rejected'), ('APPROVED', 'Approved'), ('CISA_APPROVED', 'Cisa Approved'), ('INVALID', 'Invalid')], max_length=20)),
                ('nist_cvss_validation', models.CharField(blank=True, choices=[('', 'Novalue'), ('REQUESTED', 'Requested'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='affect',
            trigger=pgtrigger.compiler.Trigger(name='insert_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "osidb_affectaudit" ("acl_read", "acl_write", "affectedness", "created_dt", "flaw_id", "impact", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_component", "ps_module", "resolution", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."affectedness", NEW."created_dt", NEW."flaw_id", NEW."impact", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."ps_component", NEW."ps_module", NEW."resolution", NEW."updated_dt", NEW."uuid"); RETURN NULL;', hash='5e1861f49b5dc4ddd501a75716cf14621951738c', operation='INSERT', pgid='pgtrigger_insert_insert_0d1b1', table='osidb_affect', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='affect',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."acl_read" IS DISTINCT FROM NEW."acl_read" OR OLD."acl_write" IS DISTINCT FROM NEW."acl_write" OR OLD."affectedness" IS DISTINCT FROM NEW."affectedness" OR OLD."created_dt" IS DISTINCT FROM NEW."created_dt" OR OLD."flaw_id" IS DISTINCT FROM NEW."flaw_id" OR OLD."impact" IS DISTINCT FROM NEW."impact" OR OLD."ps_component" IS DISTINCT FROM NEW."ps_component" OR OLD."ps_module" IS DISTINCT FROM NEW."ps_module" OR OLD."resolution" IS DISTINCT FROM NEW."resolution" OR OLD."updated_dt" IS DISTINCT FROM NEW."updated_dt" OR OLD."uuid" IS DISTINCT FROM NEW."uuid")', func='INSERT INTO "osidb_affectaudit" ("acl_read", "acl_write", "affectedness", "created_dt", "flaw_id", "impact", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_component", "ps_module", "resolution", "updated_dt", "uuid") VALUES (NEW."acl_read", NEW."acl_write", NEW."affectedness", NEW."created_dt", NEW."flaw_id", NEW."impact", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."ps_component", NEW."ps_module", NEW."resolution", NEW."updated_dt", NEW."uuid"); RETURN NULL;', hash='e4600e5737955d0e28d53d06f06138dfba1d32bf', operation='UPDATE', pgid='pgtrigger_update_update_fdef6', table='osidb_affect', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='affect',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "osidb_affectaudit" ("acl_read", "acl_write", "affectedness", "created_dt", "flaw_id", "impact", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "ps_component", "ps_module", "resolution", "updated_dt", "uuid") VALUES (OLD."acl_read", OLD."acl_write", OLD."affectedness", OLD."created_dt", OLD."flaw_id", OLD."impact", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."ps_component", OLD."ps_module", OLD."resolution", OLD."updated_dt", OLD."uuid"); RETURN NULL;', hash='33709636e9fd5530de82ef1c1981de697c5b0f8d', operation='DELETE', pgid='pgtrigger_delete_delete_cc8c5', table='osidb_affect', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='flaw',
            trigger=pgtrigger.compiler.Trigger(name='insert_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "osidb_flawaudit" ("acl_read", "acl_write", "comment_zero", "components", "created_dt", "cve_description", "cve_id", "cwe_id", "group_key", "impact", "major_incident_state", "mitigation", "nist_cvss_validation", "owner", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reported_dt", "requires_cve_description", "source", "statement", "task_key", "team_id", "title", "unembargo_dt", "uuid", "workflow_name", "workflow_state") VALUES (NEW."acl_read", NEW."acl_write", NEW."comment_zero", NEW."components", NEW."created_dt", NEW."cve_description", NEW."cve_id", NEW."cwe_id", NEW."group_key", NEW."impact", NEW."major_incident_state", NEW."mitigation", NEW."nist_cvss_validation", NEW."owner", _pgh_attach_context(), NOW(), \'insert\', NEW."uuid", NEW."reported_dt", NEW."requires_cve_description", NEW."source", NEW."statement", NEW."task_key", NEW."team_id", NEW."title", NEW."unembargo_dt", NEW."uuid", NEW."workflow_name", NEW."workflow_state"); RETURN NULL;', hash='56c872225f49f97db1473537805bfe8459f75b10', operation='INSERT', pgid='pgtrigger_insert_insert_4e668', table='osidb_flaw', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='flaw',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."acl_read" IS DISTINCT FROM NEW."acl_read" OR OLD."acl_write" IS DISTINCT FROM NEW."acl_write" OR OLD."comment_zero" IS DISTINCT FROM NEW."comment_zero" OR OLD."components" IS DISTINCT FROM NEW."components" OR OLD."created_dt" IS DISTINCT FROM NEW."created_dt" OR OLD."cve_description" IS DISTINCT FROM NEW."cve_description" OR OLD."cve_id" IS DISTINCT FROM NEW."cve_id" OR OLD."cwe_id" IS DISTINCT FROM NEW."cwe_id" OR OLD."group_key" IS DISTINCT FROM NEW."group_key" OR OLD."impact" IS DISTINCT FROM NEW."impact" OR OLD."major_incident_state" IS DISTINCT FROM NEW."major_incident_state" OR OLD."mitigation" IS DISTINCT FROM NEW."mitigation" OR OLD."nist_cvss_validation" IS DISTINCT FROM NEW."nist_cvss_validation" OR OLD."owner" IS DISTINCT FROM NEW."owner" OR OLD."reported_dt" IS DISTINCT FROM NEW."reported_dt" OR OLD."requires_cve_description" IS DISTINCT FROM NEW."requires_cve_description" OR OLD."source" IS DISTINCT FROM NEW."source" OR OLD."statement" IS DISTINCT FROM NEW."statement" OR OLD."task_key" IS DISTINCT FROM NEW."task_key" OR OLD."team_id" IS DISTINCT FROM NEW."team_id" OR OLD."title" IS DISTINCT FROM NEW."title" OR OLD."unembargo_dt" IS DISTINCT FROM NEW."unembargo_dt" OR OLD."uuid" IS DISTINCT FROM NEW."uuid" OR OLD."workflow_name" IS DISTINCT FROM NEW."workflow_name" OR OLD."workflow_state" IS DISTINCT FROM NEW."workflow_state")', func='INSERT INTO "osidb_flawaudit" ("acl_read", "acl_write", "comment_zero", "components", "created_dt", "cve_description", "cve_id", "cwe_id", "group_key", "impact", "major_incident_state", "mitigation", "nist_cvss_validation", "owner", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reported_dt", "requires_cve_description", "source", "statement", "task_key", "team_id", "title", "unembargo_dt", "uuid", "workflow_name", "workflow_state") VALUES (NEW."acl_read", NEW."acl_write", NEW."comment_zero", NEW."components", NEW."created_dt", NEW."cve_description", NEW."cve_id", NEW."cwe_id", NEW."group_key", NEW."impact", NEW."major_incident_state", NEW."mitigation", NEW."nist_cvss_validation", NEW."owner", _pgh_attach_context(), NOW(), \'update\', NEW."uuid", NEW."reported_dt", NEW."requires_cve_description", NEW."source", NEW."statement", NEW."task_key", NEW."team_id", NEW."title", NEW."unembargo_dt", NEW."uuid", NEW."workflow_name", NEW."workflow_state"); RETURN NULL;', hash='18726ed264a4f87604b70fca7aca85b6fe5fb614', operation='UPDATE', pgid='pgtrigger_update_update_96595', table='osidb_flaw', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='flaw',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "osidb_flawaudit" ("acl_read", "acl_write", "comment_zero", "components", "created_dt", "cve_description", "cve_id", "cwe_id", "group_key", "impact", "major_incident_state", "mitigation", "nist_cvss_validation", "owner", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reported_dt", "requires_cve_description", "source", "statement", "task_key", "team_id", "title", "unembargo_dt", "uuid", "workflow_name", "workflow_state") VALUES (OLD."acl_read", OLD."acl_write", OLD."comment_zero", OLD."components", OLD."created_dt", OLD."cve_description", OLD."cve_id", OLD."cwe_id", OLD."group_key", OLD."impact", OLD."major_incident_state", OLD."mitigation", OLD."nist_cvss_validation", OLD."owner", _pgh_attach_context(), NOW(), \'delete\', OLD."uuid", OLD."reported_dt", OLD."requires_cve_description", OLD."source", OLD."statement", OLD."task_key", OLD."team_id", OLD."title", OLD."unembargo_dt", OLD."uuid", OLD."workflow_name", OLD."workflow_state"); RETURN NULL;', hash='ec06c0f1321404301046a8d825f381ee2e5ba820', operation='DELETE', pgid='pgtrigger_delete_delete_f2e13', table='osidb_flaw', when='AFTER')),
        ),
        migrations.AddField(
            model_name='flawaudit',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='flawaudit',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='osidb.flaw'),
        ),
        migrations.AddField(
            model_name='affectaudit',
            name='flaw',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='osidb.flaw'),
        ),
        migrations.AddField(
            model_name='affectaudit',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='affectaudit',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='osidb.affect'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='flawaudit',
            trigger=pgtrigger.compiler.Trigger(name='append_only', sql=pgtrigger.compiler.UpsertTriggerSql(func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;", hash='195cbee13b88d274b393e907e94b01bdfa87a596', operation='UPDATE OR DELETE', pgid='pgtrigger_append_only_b8a4b', table='osidb_flawaudit', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='affectaudit',
            trigger=pgtrigger.compiler.Trigger(name='append_only', sql=pgtrigger.compiler.UpsertTriggerSql(func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;", hash='ca2d9223a1a2e17b9fdc59a87fdcaba3362e963a', operation='UPDATE OR DELETE', pgid='pgtrigger_append_only_fa9ab', table='osidb_affectaudit', when='BEFORE')),
        ),

        ##############################################
        # ENABLE ROW LEVEL SECURITY FOR AUDIT TABLES #
        ##############################################
        migrations.RunSQL(
            reverse_sql=migrations.RunSQL.noop,
            sql="""
    --enable row based security for following tables
    ALTER TABLE osidb_flawaudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_flawaudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_flawaudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_flawaudit_create on osidb_flawaudit;
    create policy acl_policy_flawaudit_create
    on osidb_flawaudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    -- Check that read / write ACLs of record to be inserted match ACL of current user
    --policy for entity select
    DROP policy if exists acl_policy_flawaudit_select on osidb_flawaudit;
    create policy acl_policy_flawaudit_select
    on osidb_flawaudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    -- Select only records with ACL that matches ACL of current user
    --policy for entity update
    DROP policy if exists acl_policy_flawaudit_update on osidb_flawaudit;
    create policy acl_policy_flawaudit_update
    on osidb_flawaudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_flawaudit_delete on osidb_flawaudit;
    create policy acl_policy_flawaudit_delete
    on osidb_flawaudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    --enable row based security for affectaudit entity table
    ALTER TABLE osidb_affectaudit ENABLE ROW LEVEL SECURITY;
    ALTER TABLE osidb_affectaudit FORCE ROW LEVEL SECURITY;
    --following policies define fine grained read/write control on osidb_affectaudit entity
    --policy for entity insert (eg. create)
    DROP policy if exists acl_policy_affectaudit_create on osidb_affectaudit;
    create policy acl_policy_affectaudit_create
    on osidb_affectaudit
    for INSERT
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity select
    DROP policy if exists acl_policy_affectaudit_select on osidb_affectaudit;
    create policy acl_policy_affectaudit_select
    on osidb_affectaudit
    for select
    USING (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    --policy for entity update
    DROP policy if exists acl_policy_affectaudit_update on osidb_affectaudit;
    create policy acl_policy_affectaudit_update
    on osidb_affectaudit
    for update
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[])
    WITH CHECK (acl_read::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]
         AND   acl_write::uuid[] && string_to_array(current_setting('osidb.acl'), ',')::uuid[]);
    --policy for entity delete
    DROP policy if exists acl_policy_affectaudit_delete on osidb_affectaudit;
    create policy acl_policy_affectaudit_delete
    on osidb_affectaudit
    for delete
    USING (acl_write::uuid[] && string_to_array(current_setting('osidb.acl'),',')::uuid[]);
    """,
        ),
    ]
