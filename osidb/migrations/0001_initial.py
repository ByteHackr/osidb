# Generated by Django 3.2.7 on 2021-09-30 22:25

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import osidb.validators
import psqlextra.fields.hstore_field
import uuid
from django.contrib.postgres.operations import HStoreExtension


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("pghistory", "0003_auto_20201023_1636"),
    ]

    operations = [
        HStoreExtension(),
        migrations.CreateModel(
            name="Affect",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "cve_id",
                    models.CharField(
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cve_id],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("DEFAULT", "Default")],
                        default="DEFAULT",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("NONE", "No value"),
                            ("NEW", "Under investigation"),
                            ("AFFECTED", "Affected"),
                            ("NOT_AFFECTED", "Not affected"),
                            ("WONT_FIX", "Will not fix"),
                            ("OOSS", "Out of support scope"),
                            ("DEFERRED", "Fix deferred"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        choices=[
                            ("NONE", "Novalue"),
                            ("FIX", "Fix"),
                            ("DEFER", "Defer"),
                            ("WONTFIX", "Wontfix"),
                            ("OOSS", "Ooss"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("ps_module", models.CharField(max_length=100, null=True)),
                ("ps_component", models.CharField(max_length=100, null=True)),
                ("module_name", models.CharField(max_length=100, null=True)),
                ("module_stream", models.CharField(max_length=100, null=True)),
                ("component", models.CharField(max_length=100, null=True)),
                ("statement", models.CharField(max_length=100, null=True)),
                (
                    "impact",
                    models.CharField(
                        choices=[
                            ("NONE", "Novalue"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("IMPORTANT", "Important"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                ("cvss2_score", models.FloatField(blank=True, null=True)),
                (
                    "cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                ("cvss3_score", models.FloatField(blank=True, null=True)),
                ("attr", psqlextra.fields.hstore_field.HStoreField(null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
            ],
            options={
                "verbose_name": "Affect",
            },
        ),
        migrations.CreateModel(
            name="Flaw",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "cve_id",
                    models.CharField(
                        max_length=500,
                        null=True,
                        unique=True,
                        validators=[osidb.validators.validate_cve_id],
                    ),
                ),
                ("package", models.CharField(blank=True, max_length=2058, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("VULNERABILITY", "Vuln"), ("WEAKNESS", "Weak")],
                        max_length=20,
                    ),
                ),
                (
                    "created_dt",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("updated_dt", models.DateTimeField(auto_now=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("STUB", "Stub"),
                            ("DRAFT", "Draft"),
                            ("NEW", "New"),
                            ("ASSIGNED", "Assigned"),
                            ("OPEN", "Open"),
                            ("CLOSED", "Closed"),
                            ("VERIFIED", "Verified"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("resolution", models.CharField(max_length=100, null=True)),
                (
                    "impact",
                    models.CharField(
                        choices=[
                            ("NONE", "Novalue"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("IMPORTANT", "Important"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("title", models.TextField()),
                ("description", models.TextField(null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                ("statement", models.TextField(blank=True, null=True)),
                (
                    "cwe_id",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[osidb.validators.validate_cwe_id],
                    ),
                ),
                ("embargoed", models.BooleanField(blank=True, null=True)),
                ("unembargo_dt", models.DateTimeField(blank=True, null=True)),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NOVALUE", "Novalue"),
                            ("ADOBE", "Adobe"),
                            ("APPLE", "Apple"),
                            ("BUGTRAQ", "Bugtraq"),
                            ("BUGZILLA", "Bugzilla"),
                            ("CERT", "Cert"),
                            ("CUSTOMER", "Customer"),
                            ("CVE", "Cve"),
                            ("DEBIAN", "Debian"),
                            ("DISTROS", "Distros"),
                            ("FULLDISCLOSURE", "Full Disclosure"),
                            ("GENTOO", "Gentoo"),
                            ("GIT", "Git"),
                            ("GOOGLE", "Google"),
                            ("HW_VENDOR", "Hw Vendor"),
                            ("INTERNET", "Internet"),
                            ("LKML", "Lkml"),
                            ("MAGEIA", "Mageia"),
                            ("MIT", "Mit"),
                            ("MOZILLA", "Mozilla"),
                            ("OSSSECURITY", "Oss Security"),
                            ("OPENSSL", "Openssl"),
                            ("ORACLE", "Oracle"),
                            ("PHP", "Php"),
                            ("PIDGIN", "Pidgin"),
                            ("REDHAT", "Redhat"),
                            ("RESEARCHER", "Researcher"),
                            ("SECALERT", "Secalert"),
                            ("SKO", "Sko"),
                            ("SECUNIA", "Secunia"),
                            ("SUN", "Sun"),
                            ("SUSE", "Suse"),
                            ("TWITTER", "Twitter"),
                            ("UBUNTU", "Ubuntu"),
                            ("UPSTREAM", "Upstream"),
                            ("VENDORSEC", "Vendor Sec"),
                            ("XEN", "Xen"),
                        ],
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "reported_dt",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[osidb.validators.no_future_date],
                    ),
                ),
                (
                    "mitigated_by",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SELINUX", "Selinux"),
                            ("FORTIFY", "Fortify"),
                            ("GRSEC", "Grsec"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                ("cvss2_score", models.FloatField(blank=True, null=True)),
                (
                    "cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                ("cvss3_score", models.FloatField(blank=True, null=True)),
                ("is_csaw", models.BooleanField(blank=True, default=False, null=True)),
                (
                    "attr",
                    psqlextra.fields.hstore_field.HStoreField(blank=True, null=True),
                ),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                ("affects", models.ManyToManyField(to="osidb.Affect")),
            ],
            options={
                "verbose_name": "Flaw",
                "ordering": ("created_dt",),
            },
        ),
        migrations.CreateModel(
            name="FlawHistory",
            fields=[
                ("pgh_created_at", models.DateTimeField(null=True)),
                ("pgh_label", models.CharField(max_length=100, null=True)),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("cve_id", models.CharField(max_length=500, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("VULNERABILITY", "Vuln"), ("WEAKNESS", "Weak")],
                        max_length=20,
                    ),
                ),
                (
                    "created_dt",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("updated_dt", models.DateTimeField(auto_now=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("STUB", "Stub"),
                            ("DRAFT", "Draft"),
                            ("NEW", "New"),
                            ("ASSIGNED", "Assigned"),
                            ("OPEN", "Open"),
                            ("CLOSED", "Closed"),
                            ("VERIFIED", "Verified"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("resolution", models.CharField(max_length=100, null=True)),
                (
                    "impact",
                    models.CharField(
                        choices=[
                            ("NONE", "Novalue"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("IMPORTANT", "Important"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("title", models.TextField()),
                ("description", models.TextField(null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                ("statement", models.TextField(blank=True, null=True)),
                (
                    "cwe_id",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[osidb.validators.validate_cwe_id],
                    ),
                ),
                ("embargoed", models.BooleanField(blank=True, null=True)),
                ("unembargo_dt", models.DateTimeField(blank=True, null=True)),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NOVALUE", "Novalue"),
                            ("ADOBE", "Adobe"),
                            ("APPLE", "Apple"),
                            ("BUGTRAQ", "Bugtraq"),
                            ("BUGZILLA", "Bugzilla"),
                            ("CERT", "Cert"),
                            ("CUSTOMER", "Customer"),
                            ("CVE", "Cve"),
                            ("DEBIAN", "Debian"),
                            ("DISTROS", "Distros"),
                            ("FULLDISCLOSURE", "Full Disclosure"),
                            ("GENTOO", "Gentoo"),
                            ("GIT", "Git"),
                            ("GOOGLE", "Google"),
                            ("HW_VENDOR", "Hw Vendor"),
                            ("INTERNET", "Internet"),
                            ("LKML", "Lkml"),
                            ("MAGEIA", "Mageia"),
                            ("MIT", "Mit"),
                            ("MOZILLA", "Mozilla"),
                            ("OSSSECURITY", "Oss Security"),
                            ("OPENSSL", "Openssl"),
                            ("ORACLE", "Oracle"),
                            ("PHP", "Php"),
                            ("PIDGIN", "Pidgin"),
                            ("REDHAT", "Redhat"),
                            ("RESEARCHER", "Researcher"),
                            ("SECALERT", "Secalert"),
                            ("SKO", "Sko"),
                            ("SECUNIA", "Secunia"),
                            ("SUN", "Sun"),
                            ("SUSE", "Suse"),
                            ("TWITTER", "Twitter"),
                            ("UBUNTU", "Ubuntu"),
                            ("UPSTREAM", "Upstream"),
                            ("VENDORSEC", "Vendor Sec"),
                            ("XEN", "Xen"),
                        ],
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "reported_dt",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[osidb.validators.no_future_date],
                    ),
                ),
                (
                    "mitigated_by",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SELINUX", "Selinux"),
                            ("FORTIFY", "Fortify"),
                            ("GRSEC", "Grsec"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                ("cvss2_score", models.FloatField(blank=True, null=True)),
                (
                    "cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                ("cvss3_score", models.FloatField(blank=True, null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                ("attr", psqlextra.fields.hstore_field.HStoreField(null=True)),
            ],
            options={
                "verbose_name": "FlawHistory",
                "ordering": ("created_dt",),
            },
        ),
        migrations.CreateModel(
            name="FlawMeta",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ERRATA", "Errata"),
                            ("REFERENCE", "Reference"),
                            ("ACKNOWLEDGMENT", "Acknowledgment"),
                            ("EXPLOIT", "Exploit"),
                            ("CSAW", "Csaw"),
                            ("CSAW_LITE", "Csaw Lite"),
                            ("REQUIRES_DOC_TEXT", "Requires Doc Text"),
                            ("NIST_CVSS_VALIDATION", "Nist Cvss Validation"),
                            ("NEED_INFO", "Need Info"),
                        ],
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "created_dt",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("attr", psqlextra.fields.hstore_field.HStoreField(null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tracker",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "cve_id",
                    models.CharField(
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cve_id],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("JIRA", "Jira"), ("BUGZILLA", "Bz")],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("key", models.CharField(max_length=100, null=True)),
                ("attr", psqlextra.fields.hstore_field.HStoreField(null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
            ],
            options={
                "verbose_name": "Tracker",
                "unique_together": {("cve_id", "type", "key")},
            },
        ),
        migrations.CreateModel(
            name="TrackerEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                (
                    "cve_id",
                    models.CharField(
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cve_id],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("JIRA", "Jira"), ("BUGZILLA", "Bz")],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("key", models.CharField(max_length=100, null=True)),
                ("attr", psqlextra.fields.hstore_field.HStoreField(null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="event",
                        to="osidb.tracker",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlawMetaEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ERRATA", "Errata"),
                            ("REFERENCE", "Reference"),
                            ("ACKNOWLEDGMENT", "Acknowledgment"),
                            ("EXPLOIT", "Exploit"),
                            ("CSAW", "Csaw"),
                            ("CSAW_LITE", "Csaw Lite"),
                            ("REQUIRES_DOC_TEXT", "Requires Doc Text"),
                            ("NIST_CVSS_VALIDATION", "Nist Cvss Validation"),
                            ("NEED_INFO", "Need Info"),
                        ],
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "created_dt",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("attr", psqlextra.fields.hstore_field.HStoreField(null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="event",
                        to="osidb.flawmeta",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlawEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                (
                    "cve_id",
                    models.CharField(
                        max_length=500,
                        null=True,
                        validators=[osidb.validators.validate_cve_id],
                    ),
                ),
                ("package", models.CharField(blank=True, max_length=2058, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("VULNERABILITY", "Vuln"), ("WEAKNESS", "Weak")],
                        max_length=20,
                    ),
                ),
                (
                    "created_dt",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("updated_dt", models.DateTimeField(auto_now=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("STUB", "Stub"),
                            ("DRAFT", "Draft"),
                            ("NEW", "New"),
                            ("ASSIGNED", "Assigned"),
                            ("OPEN", "Open"),
                            ("CLOSED", "Closed"),
                            ("VERIFIED", "Verified"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("resolution", models.CharField(max_length=100, null=True)),
                (
                    "impact",
                    models.CharField(
                        choices=[
                            ("NONE", "Novalue"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("IMPORTANT", "Important"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("title", models.TextField()),
                ("description", models.TextField(null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                ("statement", models.TextField(blank=True, null=True)),
                (
                    "cwe_id",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[osidb.validators.validate_cwe_id],
                    ),
                ),
                ("embargoed", models.BooleanField(blank=True, null=True)),
                ("unembargo_dt", models.DateTimeField(blank=True, null=True)),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NOVALUE", "Novalue"),
                            ("ADOBE", "Adobe"),
                            ("APPLE", "Apple"),
                            ("BUGTRAQ", "Bugtraq"),
                            ("BUGZILLA", "Bugzilla"),
                            ("CERT", "Cert"),
                            ("CUSTOMER", "Customer"),
                            ("CVE", "Cve"),
                            ("DEBIAN", "Debian"),
                            ("DISTROS", "Distros"),
                            ("FULLDISCLOSURE", "Full Disclosure"),
                            ("GENTOO", "Gentoo"),
                            ("GIT", "Git"),
                            ("GOOGLE", "Google"),
                            ("HW_VENDOR", "Hw Vendor"),
                            ("INTERNET", "Internet"),
                            ("LKML", "Lkml"),
                            ("MAGEIA", "Mageia"),
                            ("MIT", "Mit"),
                            ("MOZILLA", "Mozilla"),
                            ("OSSSECURITY", "Oss Security"),
                            ("OPENSSL", "Openssl"),
                            ("ORACLE", "Oracle"),
                            ("PHP", "Php"),
                            ("PIDGIN", "Pidgin"),
                            ("REDHAT", "Redhat"),
                            ("RESEARCHER", "Researcher"),
                            ("SECALERT", "Secalert"),
                            ("SKO", "Sko"),
                            ("SECUNIA", "Secunia"),
                            ("SUN", "Sun"),
                            ("SUSE", "Suse"),
                            ("TWITTER", "Twitter"),
                            ("UBUNTU", "Ubuntu"),
                            ("UPSTREAM", "Upstream"),
                            ("VENDORSEC", "Vendor Sec"),
                            ("XEN", "Xen"),
                        ],
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "reported_dt",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[osidb.validators.no_future_date],
                    ),
                ),
                (
                    "mitigated_by",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SELINUX", "Selinux"),
                            ("FORTIFY", "Fortify"),
                            ("GRSEC", "Grsec"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                ("cvss2_score", models.FloatField(blank=True, null=True)),
                (
                    "cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                ("cvss3_score", models.FloatField(blank=True, null=True)),
                ("is_csaw", models.BooleanField(blank=True, default=False, null=True)),
                (
                    "attr",
                    psqlextra.fields.hstore_field.HStoreField(blank=True, null=True),
                ),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="event",
                        to="osidb.flaw",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlawComment",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("BUGZILLA", "Bugzilla")],
                        default="BUGZILLA",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "created_dt",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("external_system_id", models.CharField(max_length=100, null=True)),
                ("order", models.IntegerField(null=True)),
                ("attr", psqlextra.fields.hstore_field.HStoreField(null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "flaw",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="osidb.flaw",
                    ),
                ),
            ],
            options={
                "ordering": ("order", "external_system_id", "created_dt"),
            },
        ),
        migrations.AddField(
            model_name="flaw",
            name="meta",
            field=models.ManyToManyField(related_name="meta", to="osidb.FlawMeta"),
        ),
        migrations.CreateModel(
            name="AffectEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, serialize=False
                    ),
                ),
                (
                    "cve_id",
                    models.CharField(
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cve_id],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("DEFAULT", "Default")],
                        default="DEFAULT",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("NONE", "No value"),
                            ("NEW", "Under investigation"),
                            ("AFFECTED", "Affected"),
                            ("NOT_AFFECTED", "Not affected"),
                            ("WONT_FIX", "Will not fix"),
                            ("OOSS", "Out of support scope"),
                            ("DEFERRED", "Fix deferred"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        choices=[
                            ("NONE", "Novalue"),
                            ("FIX", "Fix"),
                            ("DEFER", "Defer"),
                            ("WONTFIX", "Wontfix"),
                            ("OOSS", "Ooss"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("ps_module", models.CharField(max_length=100, null=True)),
                ("ps_component", models.CharField(max_length=100, null=True)),
                ("module_name", models.CharField(max_length=100, null=True)),
                ("module_stream", models.CharField(max_length=100, null=True)),
                ("component", models.CharField(max_length=100, null=True)),
                ("statement", models.CharField(max_length=100, null=True)),
                (
                    "impact",
                    models.CharField(
                        choices=[
                            ("NONE", "Novalue"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("IMPORTANT", "Important"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "cvss2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss2],
                    ),
                ),
                ("cvss2_score", models.FloatField(blank=True, null=True)),
                (
                    "cvss3",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[osidb.validators.validate_cvss3],
                    ),
                ),
                ("cvss3_score", models.FloatField(blank=True, null=True)),
                ("attr", psqlextra.fields.hstore_field.HStoreField(null=True)),
                (
                    "acl_read",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "acl_write",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.UUIDField(), default=list, size=None
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="event",
                        to="osidb.affect",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="affect",
            name="trackers",
            field=models.ManyToManyField(to="osidb.Tracker"),
        ),
        migrations.AlterUniqueTogether(
            name="flaw",
            unique_together={("cve_id",)},
        ),
        migrations.AlterUniqueTogether(
            name="affect",
            unique_together={("cve_id", "ps_module", "ps_component")},
        ),
    ]
